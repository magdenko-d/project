Документация к проекту: Telegram бот для поиска фастфуд-заведений, кофеен, ресторанов по станциям
метро в пределах Садового кольца.

Этот бот предоставляет пользователям:
    Выбрать тип заведения из предложенных;
    Выбрать станцию метро из предложенных;
    Вывод 3-х заведений по их типу и выбранной станции метро с возможностью перейти на сайт с меню.

Ключевые функции:

metro_fastfoods()
    Функция для создания клавиатуры с reply кнопками для фастфуда.

    Извлекает данные о фастфуд-заведениях из базы данных, формирует клавиатуру
    с кнопками станций метро.

    Returns:
        ReplyKeyboardMarkup: Клавиатура с кнопками станций 
        метро для фастфуд-заведений.
    
    Examples:
        
        >>> metro_fastfoods()
        keyboard.as_markup()    

metro_coffeeshops()
Функция для создания клавиатуры с reply кнопками для кофеен.

    Извлекает данные о кофейнях из базы данных, формирует клавиатуру
    с кнопками станций метро.

    Returns:
        ReplyKeyboardMarkup: Клавиатура с кнопками станций 
        метро для кофеен.
    Examples:
        
        >>> metro_coffeeshops()
        keyboard.as_markup()

metro_restaurants()
Функция для создания клавиатуры с reply кнопками для ресторанов.

    Извлекает данные о ресторанах из базы данных, формирует клавиатуру
    с кнопками станций метро.

    Returns:
        ReplyKeyboardMarkup: Клавиатура с кнопками станций 
        метро для ресторанов.
    
    Examples:
        
        >>> metro_restaurants()
        keyboard.as_markup()

restart(callback: CallbackQuery)
Обработчик CallData 'restart', отправляющий сообщение.

    Функция принимает Callback 'restart' и отправляет сообщение: 
    'Чтобы начать заново, наберите: /start'

    Args:
        callback(CallbackQuery): callback запрос от пользователя.
    
    Returns:
        None: Отправка сообщения 'Чтобы начать заново, наберите: /start'

    Examples:
        Пользователь нажимает кнопку "Начать сначала", бот отправляет сообщение.

        >>> callback='restart'
        >>> restart(callback)
        'Чтобы начать заново, наберите: /start'

smthelse(callback: CallbackQuery)
Обработчик CallData 'else', отправляющий сообщение.

    Функция принимает Callback 'else' и отправляет сообщение: 
    'Чтобы начать заново, наберите: /start'

    Args:
        callback(CallbackQuery): callback запрос от пользователя.
    
    Returns:
        None: Отправка сообщения 'Чтобы начать заново, наберите: /start'

    Examples:
        Пользователь нажимает кнопку "Выбрать что-то другое", бот отправляет сообщение.

        >>> callback='else'
        >>> smthelse(callback)
        'К сожалению, можно выбрать станцию и тип заведения только из предложенных. 
        Чтобы начать заново, наберите /start'

start(message: Message)
Обработчик команды /start.

    Обработчик приветствует пользователя и выводит reply клавиатуру 
    для выбора типа заведений.

    Args:
        message(Message): Сообщение от пользователя.
    
    Returns:
        None: Отправляется сообщение и reply клавиатура.
    
    Examples:
        Пользователь нажимает/отправляет сообщение /start, бот 
        отправляет сообщение с reply клавиатурой.

        >>> message='/start'
        >>> start(message)
        'Привет, {first_name}! Выберите тип заведения.', ReplyKeyboardMarkup

choose_metro_fastfoods(message: Message)
Обработчик сообщения 'Фастфуд.

    Обработчик предлагает выбрать станцию метро по выбранному типу заведения
    и выводит reply клавиатуру со станциями из базы данных.

    Args:
        message(Message): Сообщение от пользователя.
    
    Returns:
        None: Отправляется сообщение с reply клавиатурой для выбора станции.
    
    Examples: 
        Пользователь выбирает тип заведения 'Фастфуд', бот отправляет 
        сообщение с reply клавиатурой.

        >>> message='Фастфуд'
        >>> choose_metro_fastfoods(message)
        'Выберите станцию метро из предложенных!', ReplyKeyboardMarkup

choose_metro_coffeeshops(message: Message)
Обработчик сообщения 'Кофейни'.

    Обработчик предлагает выбрать станцию метро по выбранному типу заведения
    и выводит reply клавиатуру со станциями из базы данных.

    Args:
        message(Message): Сообщение от пользователя.
    
    Returns:
        None: Отправляется сообщение с reply клавиатурой для выбора станции.
    
    Examples: 
        Пользователь выбирает тип заведения 'Кофейни', бот отправляет 
        сообщение с reply клавиатурой.

        >>> message='Кофейни'
        >>> choose_metro_coffeeshops(message)
        'Выберите станцию метро из предложенных!', ReplyKeyboardMarkup

choose_metro_restaurants(message: Message)
    Обработчик сообщения 'Рестораны'.

    Обработчик предлагает выбрать станцию метро по выбранному типу заведения
    и выводит reply клавиатуру со станциями из базы данных.

    Args:
        message(Message): Сообщение от пользователя.
    
    Returns:
        None: Отправляется сообщение с reply клавиатурой для выбора станции.
    
    Examples: 
        Пользователь выбирает тип заведения 'Рестораны', бот отправляет 
        сообщение с reply клавиатурой.

        >>> message='Рестораны'
        >>> choose_metro_restaurants(message)
        'Выберите станцию метро из предложенных!', ReplyKeyboardMarkup

choose_place_fastfoods(message: Message)
    Обработчик для вывода фастфуд-заведений.

    Функция сравнивает сообщение со значениями из базы данных в столбике
    с названиями станций, в случае совпадения отправляет сообщение со 
    списком заведений и inline клавиатуру, по которой можно посмотреть меню,
    узнать как начать заново и можно ли выбрать что-то другое.

    Args:
        message(Message): Сообщение от пользователя

    Returns:
        None: Отправка сообщения с inline клавиатурой.
        
    Examples:
        Пользователь выбирает станцию 'Павелецкая (1)', бот отправляет 
        сообщение с inline клавиатурой.

        >>> message='Павелецкая (1)'
        >>> choose_place_fastfoods(message)
        'Текст', InlineKeyboardMarkup

choose_place_coffeeshops(message: Message)
    Обработчик для вывода заведений-кофеен.

    Функция сравнивает сообщение со значениями из базы данных в столбике
    с названиями станций, в случае совпадения отправляет сообщение со 
    списком заведений и inline клавиатуру, по которой можно посмотреть меню,
    узнать как начать заново и можно ли выбрать что-то другое.

    Args:
        message(Message): Сообщение от пользователя

    Returns:
        None: Отправка сообщения с inline клавиатурой.
        
    Examples:
        Пользователь выбирает станцию 'Китай-город (2)', бот отправляет 
        сообщение с inline клавиатурой.

        >>> message='Китай-город (2)'
        >>> choose_place_coffeeshops(message)
        'Текст', InlineKeyboardMarkup

choose_place_restaurants(message: Message)
    Обработчик для вывода заведений-ресторанов.

    Функция сравнивает сообщение со значениями из базы данных в столбике
    с названиями станций, в случае совпадения отправляет сообщение со 
    списком заведений и inline клавиатуру, по которой можно посмотреть меню,
    узнать как начать заново и можно ли выбрать что-то другое.

    Args:
        message(Message): Сообщение от пользователя

    Returns:
        None: Отправка сообщения с inline клавиатурой.
        
    Examples:
        Пользователь выбирает станцию 'Полянка (3)', бот отправляет сообщение с inline клавиатурой.

        >>> message='Полянка (3)'
        >>> choose_place_restaurants(message)
        'Текст', InlineKeyboardMarkup

get_help(message:Message)
Обработчик команды /help.

    Обработчик команды /help предоставляет контакты для техничекой поддержки.

    Args:
        message(Message):

    Returns:
        None:
    
    Examples:
        Пользователь отправляет /help, бот отправляет сообщение для тех. поддержки.

        >>> message='/'
        >>> get_help(message)
        'Если у вас возникли проблемы с работой бота, напишите @slaydx.'

